#---------------------------#
    Decorators
#---------------------------#
Definition:
A decorator is a function that takes another function and extends its behavior without 
explicitly modifying it. Decorators are used to add functionality to existing code in 
a clean and readable way.

Syntax:
You define a decorator using the '@' symbol followed by the decorator function name. 
The decorator function itself taes a function as an argument and returns a new function.

Example:

def my_decorator(func):
    def wrapper():
        print("Something is happening before the function is called.")
        func()
        print("Something is happening after the function is called.")
    return wrapper

@my_decorator
def say_hello():
    print("Hello!")

say_hello()

In this example, the 'my_decorator' function is applied to the 'say_hello' function. The 
'wrapper' function should also accept and pass those arguments.

#---------------------------#
    Decorating Functions with arguments
#---------------------------#
If the function being decorated takes arguments, the wrapper function should also accept
and pass those arguments.

Example:

def my_decorator(func):
    def wrapper(*args, **kwargs):
        print("Something is happening before the function is called.")
        result = func(*args, **kwargs)
        print("Something is happening after the function is called.")
        return result
    return wrapper

@my_decorator
def greet(name):
    print(f"Hello, {name}!")

greet("Alice")

#---------------------------#
    Small Example
#---------------------------#

def log_decorator(func):
    def wrapper(*args, **kwargs):
        print(f"Calling function '{func.__name__}' with arguments: {args},")
        result = func(*args, **kwargs)
        print(f"Function '{func.__name__}' returned: {result}")
        return result
    return wrapper

@log_decorator
def add(a, b):
    return a + b

@log_decorator
def multiply(a, b):
    return a * b

# Calling decorated functions
print(add(3, 5))
print(multiply(4, 6))

This script defines a 'log_decorator' that logs the function name, arguments, and return 
value. It decorates two functions, 'add' and 'multiply', and demonstrates their enhanced 
behavior.