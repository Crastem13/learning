    Exception Handling

#---------------------------#
Definition:
    Exceptions are errors that occur during the execution of a program. Exception handling 
allows you to manage these errors gracefully without terminating the program abruptly.

    'try' and 'except' block

    You can handle exceptions using 'try' and 'except' block. Code that might raise an 
exception is placed inside the 'try' block, and the code to handle the exception is placed 
inside the 'except' block.

try:
    result = 10 / 0
except ZeroDivisionError:
    print("You cannot divide by zero!")

#---------------------------#
Multiple 'except' Blocks
    You can have multiple 'except' blocks to handle different types of exceptions.

Example:

try:
    value = int(input("Enter a number: "))
    result = 10 / value
except ValueError:
    print("Invalid input! Please enter a number.")
except ZeroDivisionError:
    print("You cannot divide by zero!")

#---------------------------#
'else' and 'finally' Clauses
    - 'else': The code inside the 'else' block is executed if no exceptions are raised.
    - 'finally': The code inside the 'finally' block is always executed, regardless of 
    whether an exception was raised or not. It is often used for cleanup actions.

Example:

try:
    value = int(input("Enter a number: "))
    result = 10 / value
except ValueError:
    print("Invalid input! Please enter a number.")
except ZeroDivisionError:
    print("You cannot divide by zero!")
else:
    print(f"The result is {result}")
finally:
    print("Execution completed.")

#---------------------------#
Raising Exceptions
    You can raise exceptions manually using the 'raise' keyword.

Example:

def check_age(age):
    if age < 18:
        raise ValueError("Age must be 18 or older.")
    return "Access granted."

try:
    print(check_age(15))
except ValueError as e:
    print(e)

#---------------------------#
Small Example:

def divide(a, b):
    try:
        result = a / b
    except ZeroDivisionError:
        return "You cannot divide by zero!"
    else:
        return result

# Test cases
print(divide(10, 2))  # Should print 5.0
print(divide(10, 0))  # Should print an error message

This script defines a function that divides two numbers and handles the 'ZeroDivisionError' exception.