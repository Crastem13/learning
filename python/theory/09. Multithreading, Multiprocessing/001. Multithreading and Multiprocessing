#---------------------------#
    Multithreading
#---------------------------#

Definition:
Multithreading allows multiple threads (smaller units of a process) to run concurrently within 
a single process. It's useful for I/O-bound tasks where the program spends a lot of time 
waiting for external events.

Using the 'threading' Module
Python's 'threading' module allows you to create and manage threads.

Example:

import threading
import time

def print_numbers():
    for i in range(5):
        print(i)
        time.sleep(1)

def print_letters():
    for letter in "abcde":
        print(letter)
        time.sleep(1)

# Creating threads
t1 = threading.Thread(target=print_numbers)
t2 = threading.Thread(target=print_letters)

# Starting threads
t1.start()
t2.start()

# Waiting for threads to complete
t1.join()
t2.join()

print("Done!")

#---------------------------#
    Multiprocessing
#---------------------------#

Definition:
Multiprocessing allows multiple processes to run concurrently, utilizing multiple CPU cores. 
It's useful for CPU-bound tasks that require significant computational power.

Using the 'multiprocessing' Module
Python's multiprocessing module allows you to create and manage processes.

Example:

import multiprocessing
import time

def print_numbers():
    for i in range(5):
        print(i)
        time.sleep(1)

def print_letters():
    for letter in 'abcde':
        print(letter)
        time.sleep(1)

# Creating processes
p1 = multiprocessing.Process(target=print_numbers)
p2 = multiprocessing.Process(target=print_letters)

# Starting processes
p1.start()
p2.start()

# Waiting for processes to complete
p1.join()
p2.join()

print("Done!")

#---------------------------#
    Small example
#---------------------------#

import threading
import multiprocessing
import time

def count_to_five(name):
    for i in range(1, 6):
        print(f"{name}: {i}")
        time.sleep(1)

# Multithreading example
print("Multithreading example:")
t1 = threading.Thread(target=count_to_five, args=("Thread 1",))
t2 = threading.Thread(target=count_to_five, args=("Thread 2",))
t1.start()
t2.start()
t1.join()
t2.join()

# Multiprocessing example
print("\nMultiprocessing example:")
p1 = multiprocessing.Process(target=count_to_five, args=("Process 1",))
p2 = multiprocessing.Process(target=count_to_five, args=("Process 2",))
p1.start()
p2.start()
p1.join()
p2.join()